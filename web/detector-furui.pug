extends /layout/default

block beforehtml
  - const title = 'Key Detector (福睿)'

block style
  meta(property="og:description", content=title)
  meta(property="og:locale", content="zh_TW")
  meta(property="og:title", content=title)
  meta(property="og:type", content="website")
  meta(property="og:url", content=`${baseurl}detector-furui.html`)
  style
    :sass
      [v-cloak]
        display: none
      body, .h1, .h2, .h3, .h4, .h5, .h6, h1, h2, h3, h4, h5, h6
        font-family: 'Noto Sans TC', sans-serif
      .letter-spacing-n1px
        letter-spacing: -1px
      .input-group-prepend > .input-group-text
        width: 85px

block content
  #app.my-3.container.text-monospace(v-cloak)
    h4.mb-3.text-center= title
    .form-group
      label 選擇 PN532 的連線方式
      select.form-control.form-control-sm(v-model="h.adapter")
        option(value="ble") 透過藍芽 BLE 連線 (支援 PC 及 Android)
        option(value="usb") 透過 USB 連線 (支援 PC)
    .card.mb-3
      .card-header #[i.fa.fa-fw.fa-id-card] 讀取或模擬卡片
      .card-body
        .input-group.input-group-sm.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center 卡片類型
          select.form-control.form-control-sm(v-model="h.type")
            option(value="0") S50CL1 (1k, 4 bytes UID)
            option(value="1") S70CL1 (4k, 4 bytes UID)
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center UID
          input.form-control(pattern="[\\dA-Fa-f]{8}", placeholder="請輸入 8 位數 16 進位的 UID", required, v-model="h.uid")
          .input-group-append: button.btn.btn-outline-danger(type="button", @click="h.uid = ''") 清空
        .row.mx-n1
          .col.px-1: button.btn.btn-block.btn-success(@click="btnReadDetector") #[i.fa.fa-fw.fa-sign-out] 讀取卡號
          .col.px-1: button.btn.btn-block.btn-primary(@click="btnSetDetector") #[i.fa.fa-fw.fa-sign-in] 模擬卡號
    .card.mb-3
      .card-header #[i.fa.fa-fw.fa-lock] 破解金鑰或測試讀取
      .card-body
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center Block
          input.form-control(type="number", min="0", max="63", required, v-model.number="h.block")
          .input-group-append: span.input-group-text Sector {{ (h?.block ?? 0) >>> 2 }}
        .input-group.input-group-sm.mb-2
          .input-group-prepend: span.input-group-text.justify-content-center KEY類型
          select.form-control.form-control-sm(v-model.number="h.isKb")
            option(value="0") Key A
            option(value="1") Key B
        .input-group.input-group-sm.mb-2.was-validated
          .input-group-prepend: span.input-group-text.justify-content-center KEY
          input.form-control(type="text", required, pattern="[\\dA-Fa-f]{12}", v-model="h.key")
          .input-group-append: button.btn.btn-outline-success(type="button", @click="h.key") 複製
        .row.mx-n1
          .col.px-1: button.btn.btn-block.btn-success(@click="btnMfkey32v2") #[i.fa.fa-fw.fa-key] 破解金鑰
          .col.px-1: button.btn.btn-block.btn-primary(@click="btnReadBlock") #[i.fa.fa-fw.fa-unlock-alt] 測試讀取
      .table-responsive.letter-spacing-n1px(style="font-size: .85rem")
        table.mb-0.table.table-striped.table-bordered.table-sm.text-center
          thead: tr
            th sector
            th isKb
            th key
            th &nbsp;
          tbody
            tr(v-if="!h.detects.length"): td.text-center(colspan="4") 請先模擬卡號、刷卡三次以上、然後按下破解金鑰按鈕。
            tr(
              v-for="d in h.detects",
              :key="`${d.block}-${d.isKb}-${d.key}`",
            )
              td(@click="btnCopy(d.block >>> 2)") {{ d.block >>> 2 }}
              td(@click="btnCopy('AB'[d.isKb])") {{ 'AB'[d.isKb] }}
              td(@click="btnCopy(d.key)") {{ d.key }}
              td(@click="btnSetTestFromDetect(d)"): a.badge.badge-primary.mr-1(href="javascript:void(0)") 填寫
    .card.mb-3
      .card-header #[i.fa.fa-fw.fa-book] 使用教學及購買連結
      .card-body
        small
          p 請先把原卡放在 PN532 上，按下「讀取卡號」來取得原卡的卡號，然後把原卡移開並把「福睿偵測卡」放到 PN532 上，按下「模擬卡號」來設定卡號。模擬完成後，請把「福睿偵測卡」拿去門禁讀卡機刷卡三次以上，然後再把「福睿偵測卡」放在 PN532 上，按下「破解金鑰」應該就可以取得金鑰了。
          p 開發者所取得的「福睿偵測卡」硬體，能夠記錄 8 次 Sector 0 的刷卡記錄，如果已經記錄過 8 次 Sector 0 刷卡記錄，你就需要把「福睿偵測卡」放到 PN532 上，再次按下「模擬卡號」按鈕才能重新記錄。
          p 如果沒有辦法成功使用這種方式取得卡片金鑰，代表讀卡機沒有使用金鑰讀寫 Sector 0，或是讀卡機有針對此種攻擊方式進行防範，這時候你會需要改用其他嗅探卡或是側錄讀卡機與原卡的通訊資料才能破解金鑰。
        .row.mx-n1.mt-2
          .col.px-1: a.btn.btn-block.btn-outline-secondary(target="_blank", href="https://xmfuruixin.taobao.com/") #[i.fa.fa-fw.fa-shopping-cart] 店舖頁面
          .col.px-1: a.btn.btn-block.btn-outline-secondary(target="_blank", href="https://lihi1.com/0vzx7") #[i.fa.fa-fw.fa-tag] 購買網頁
        button.btn.mt-2.btn-block.btn-danger(@click="btnReset") #[i.fa.mr-2.fa-repeat] 重設資料

block script
  script.
    const {
      Pn532: { Pn532, Packet, utils: Pn532utils }, // eslint-disable-line no-unused-vars
      Crypto1,
      Pn532Hf14a,
      Pn532LoggerRxTx, // eslint-disable-line no-unused-vars
      Pn532WebbleAdapter,
      Pn532WebserialAdapter,
    } = window

    // usb adapter
    const pn532usb = new Pn532()
    pn532usb.use(new Pn532WebserialAdapter())
    pn532usb.use(new Pn532Hf14a())

    // ble adapter
    const pn532ble = new Pn532()
    pn532ble.use(new Pn532WebbleAdapter())
    pn532ble.use(new Pn532Hf14a())

    if (new URL(location).searchParams.has('debug')) {
      // debug mode
      pn532usb.use(new Pn532LoggerRxTx())
      pn532ble.use(new Pn532LoggerRxTx())
    }

    window.vm = new Vue({
      el: '#app',
      data: {
        h: {
          adapter: 'ble',
          block: 3,
          detects: [],
          isKb: 0,
          key: 'FFFFFFFFFFFF',
          type: 0,
          uid: '01020304',
        },
      },
      async mounted () {
        // 自動儲存功能
        try {
          const saved = JSON5.parse(localStorage.getItem(location.pathname))
          if (saved) this.$set(this, 'h', { ...this.h, ...saved })
        } catch (err) {}
        this.$watch('h', () => {
          localStorage.setItem(location.pathname, JSON5.stringify(this.h))
        }, { deep: true })
      },
      computed: {
        pn532 () {
          return this.h.adapter === 'usb' ? pn532usb : pn532ble
        },
      },
      methods: {
        async btnReadDetector () {
          try {
            this.showLoading('正在讀卡...', '若耗時過久請重新整理網頁。')
            const card = await this.pn532.$hf14a.mfSelectCard()
            this.h.uid = card.uid.hex
            this.h.type = +(card.atqa.hex === '0002' && card.sak.hex === '18')
            Swal.close()
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '讀卡失敗', text: err.message })
          }
        },
        async btnSetDetector () {
          const { pn532 } = this
          try {
            const uid = Packet.fromHex(this.h.uid)
            if (!Packet.isLen(uid, 4)) throw new TypeError('卡號 uid 有誤')
            this.showLoading('正在模擬...', '若讀卡機燈號沒有持續閃爍，請重新整理網頁。')
            try {
              await pn532.$hf14a.inListPassiveTarget()
              await pn532.inSelect({ tg: 1 })
              await pn532.rfSetTimeouts()
              await pn532.updateRegistersWithMask([
                { adr: 0x6303, mask: 0x80, value: 0x00 }, // PN53X_REG_CIU_RxMode, SYMBOL_RX_CRC_ENABLE, 0x80
              ])
              const { data: data1 } = await pn532.inCommunicateThru({ data: Packet.fromHex('AAA700') })
              const recordLen = data1[2]
              await pn532.inDeselect()
              await pn532.inSelect({ tg: 1 })
              await pn532.rfSetTimeouts()
              await pn532.updateRegistersWithMask([
                { adr: 0x6303, mask: 0x80, value: 0x00 }, // PN53X_REG_CIU_RxMode, SYMBOL_RX_CRC_ENABLE, 0x80
              ])
              await pn532.inCommunicateThru({ data: Packet.fromHex('AAA500000000000000000000000000000000') })
              await pn532.inCommunicateThru({
                data: Packet.merge(
                  Packet.fromHex('AAA4'), // cmd
                  uid, // uid
                  new Packet([uid.xor]), // uid bcc
                  Packet.fromHex(this.h.type ? '180200' : '080400'), // sak, atqa
                  new Packet(8),
                ),
              })
              if (recordLen > 0) {
                await pn532.inCommunicateThru({ data: Packet.fromHex('AAA5FFFFFF00000000000000000000000000') })
                for (let i = 1; i <= recordLen; i++) await pn532.inCommunicateThru({ data: new Packet([...Packet.fromHex('AAA600'), i]) })
              }
            } finally {
              await pn532.updateRegistersWithMask([
                { adr: 0x6303, mask: 0x80, value: 0x80 }, // PN53X_REG_CIU_RxMode, SYMBOL_RX_CRC_ENABLE, 0x80
              ])
              if (pn532?.$adapter?.isOpen?.()) await pn532.inRelease().catch(() => {})
            }
            const card = await this.pn532.$hf14a.mfSelectCard()
            if (!card) throw new Error('模擬後讀取不到卡片')
            if (card.uid.hex !== this.h.uid) throw new Error('模擬後讀取到的 UID 錯誤')
            if (`${card.atqa.hex}-${card.sak.hex}` !== (this.h.type ? '0002-18' : '0004-08')) throw new Error('模擬後讀取到的 ATQA, SAK 錯誤')
            await Swal.fire({ icon: 'success', title: '模擬成功' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '模擬失敗', text: err.message })
          }
        },
        async btnReadBlock () {
          const { pn532 } = this
          try {
            this.showLoading('正在測試...', '若耗時過久請重新整理網頁。')
            const blockData = await pn532.$hf14a.mfReadBlock({
              block: this.h.block,
              isKb: this.h.isKb,
              key: Packet.fromHex(this.h.key),
            })
            console.log(blockData)
            await Swal.fire({ icon: 'success', title: '測試成功' })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '測試失敗', text: err.message })
          }
        },
        async btnMfkey32v2 () {
          const { pn532 } = this
          try {
            this.showLoading('正在破解...', '若耗時過久請重新整理網頁。')
            this.$set(this.h, 'detects', [])
            const records = []
            try {
              await pn532.$hf14a.inListPassiveTarget()
              await pn532.inSelect({ tg: 1 })
              await pn532.rfSetTimeouts()
              await pn532.updateRegistersWithMask([
                { adr: 0x6303, mask: 0x80, value: 0x00 }, // PN53X_REG_CIU_RxMode, SYMBOL_RX_CRC_ENABLE, 0x80
              ])
              const { data: data1 } = await pn532.inCommunicateThru({ data: Packet.fromHex('AAA700') })
              const recordLen = data1[2]
              if (recordLen < 2) throw new Error('刷卡次數不夠。請先模擬卡號、刷卡三次以上、然後按下破解金鑰按鈕。')
              for (let i = 1; i <= recordLen; i++) {
                const { data: data2 } = await pn532.inCommunicateThru({ data: new Packet([...Packet.fromHex('AAA800'), i]) })
                records.push({
                  uid: data2.subarray(0, 4).hex,
                  block: data2[4],
                  sector: data2[4] >>> 2,
                  isKb: +(data2[5] === 0x61),
                  nt: data2.subarray(6, 10),
                  nr: data2.subarray(10, 14),
                  ar: data2.subarray(14, 18),
                })
              }
            } finally {
              await pn532.updateRegistersWithMask([
                { adr: 0x6303, mask: 0x80, value: 0x80 }, // PN53X_REG_CIU_RxMode, SYMBOL_RX_CRC_ENABLE, 0x80
              ])
              if (pn532?.$adapter?.isOpen?.()) await pn532.inRelease().catch(() => {})
            }
            let detectLen = 0
            for (let i = 0; i < records.length; i++) {
              try {
                const r0 = records[i]
                const r1 = _.find(records, r => _.every(['uid', 'sector', 'isKb'], k => r0[k] === r[k]), i + 1)
                if (!r1) continue
                this.showLoading('正在破解...', `正在計算第 ${++detectLen} 組金鑰`)
                this.$set(this.h, 'detects', _.unionWith([{
                  block: r0.block,
                  isKb: r0.isKb,
                  key: this.mfkey32v2(r0.uid, r0, r1),
                }], this.h.detects, _.isEqual))
              } catch (err) {
                console.error(err)
              }
            }
            await Swal.fire({ icon: 'success', title: '破解成功', text: `找到 ${this.h.detects.length} 組金鑰` })
          } catch (err) {
            console.error(err)
            await Swal.fire({ icon: 'error', title: '破解失敗', text: err.message })
          }
        },
        btnSetTestFromDetect (detect) {
          _.assign(this.h, _.pick(detect, ['block', 'isKb', 'key']))
        },
        mfkey32v2 (uid, r0, r1) {
          return Crypto1.mfkey32v2({
            uid,
            nt0: r0.nt,
            nr0: r0.nr,
            ar0: r0.ar,
            nt1: r1.nt,
            nr1: r1.nr,
            ar1: r1.ar,
          }).hex
        },
        async btnCopy (text, container = null) {
          if (!container) container = document.body
          const dom = document.createElement('textarea')
          dom.value = text
          container.appendChild(dom)
          dom.select()
          dom.setSelectionRange(0, 1e6) // For mobile devices
          document.execCommand('copy')
          container.removeChild(dom)
          await Swal.fire({ icon: 'success', title: '複製成功' })
        },
        async btnReset () {
          if (!await this.confirm('是否重設資料？（此動作無法還原）', '確定', '取消')) return
          this.showLoading('重設資料中...', '重設後將自動重新整理網頁。')
          localStorage.removeItem(location.pathname)
          location.reload()
          return await new Promise(resolve => {})
        },
        async confirm (text, confirmButtonText, cancelButtonText) {
          const args = {
            cancelButtonColor: '#3085d6',
            cancelButtonText,
            confirmButtonColor: '#d33',
            confirmButtonText,
            focusCancel: true,
            icon: 'warning',
            showCancelButton: true,
            text,
          }
          return (await Swal.fire(args))?.isConfirmed
        },
        showLoading (title, text) {
          Swal.fire({
            title,
            text,
            allowOutsideClick: false,
            showConfirmButton: false,
            willOpen: () => { Swal.showLoading() },
          })
        },
      },
    })
